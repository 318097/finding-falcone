{"version":3,"sources":["components/layouts/Header.js","components/layouts/Footer.js","components/Card.js","components/AlertBox.js","utils.js","components/Home.js","components/Results.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Header","Footer","Card","id","planets","selectedPlanet","name","distance","vehicles","selectedVehicle","setData","useState","showVehicleOptions","setShowVehicleOptions","handleVehicleSelect","value","target","result","find","vehicle","className","placeholder","onChange","planet","disabled","map","key","index","total_no","max_distance","disableRadioButton","htmlFor","type","Math","max","AlertBox","message","class","setToken","token","sessionStorage","setItem","extractNames","input","Object","values","data","CardWrapper","styled","div","totalDestinations","Array","fill","withRouter","history","setPlanets","setVehicles","selectedPlanets","setSelectedPlanets","selectedVehicles","setSelectedVehicles","totalTime","setTotalTime","disableSubmitButton","setDisableSubmitButton","loading","setLoading","alertBoxStatus","setAlertBoxStatus","useEffect","fetchPlanets","a","async","axios","get","fetchVehicles","post","headers","Accept","fetchToken","total","forEach","_","speed","calculateTotalTime","disableSubmitButtonStatus","reduce","acc","availablePlanets","filter","unavailablePlanets","includes","availableVehicles","totalQuantityUsed","i","onClick","inputData","getItem","planet_names","vehicle_names","query","queryString","stringify","planetName","planet_name","success","status","push","setTimeout","location","setResult","queryResults","parse","search","defaults","baseURL","App","basename","path","exact","component","Home","Results","render","to","NotFound","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33ab5123.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n  <header>\n    <h3>Finding <span>Falcone!</span></h3>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer>\n      Coding problem - www.geektrust.in/finding-falcone\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useState } from 'react';\n\nconst Card = ({\n  id,\n  planets = [],\n  selectedPlanet = { name: 'default', distance: null },\n  vehicles = [],\n  selectedVehicle = { name: null },\n  setData\n}) => {\n  const [showVehicleOptions, setShowVehicleOptions] = useState(false);\n\n  const handlePlanetSelect = ({ target: { value } }) => {\n    const result = planets.find(planet => planet.name === value);\n    setData('PLANETS', `input${id}`, result);\n    setShowVehicleOptions(true);\n  };\n\n  const handleVehicleSelect = ({ target: { value } }) => {\n    const result = vehicles.find(vehicle => vehicle.name === value);\n    setData('VEHICLES', `input${id}`, result);\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h4>Destination {id}</h4>\n\n        <select value={selectedPlanet.name} placeholder=\"Select Planet\" onChange={handlePlanetSelect}>\n          <option disabled value=\"default\">Select</option>\n          {planets.map(({ name }) => (\n            <option\n              key={name}\n              value={name}\n            >\n              {name}\n            </option>\n          ))}\n        </select>\n        <br />\n        {\n          showVehicleOptions &&\n          (\n            <div>\n              {\n                vehicles.map((vehicle, index) => {\n                  const { name, total_no, max_distance } = vehicle;\n                  const disableRadioButton = (selectedVehicle.name !== vehicle.name && total_no <= 0) || (selectedPlanet.distance > max_distance);\n\n                  return (\n                    <label\n                      key={name}\n                      htmlFor={`radio${id}${index}`}\n                      className=\"paper-radio\"\n                    >\n                      <input\n                        disabled={disableRadioButton}\n                        onChange={handleVehicleSelect}\n                        type=\"radio\"\n                        name={`paperRadio${id}`}\n                        id={`radio${id}${index}`}\n                        value={name}\n                      />\n                      <span className={`${disableRadioButton && 'disable-radio-button'}`}>{name}({Math.max(0, total_no)})</span>\n                    </label>\n                  );\n                })\n              }\n            </div>\n          )\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\n\nconst AlertBox = ({ message }) => (\n  <div className=\"alert-box\">\n    <div class=\"alert alert-danger\">\n      {message}\n    </div>\n  </div>\n);\n\nexport default AlertBox;\n","const getToken = () => sessionStorage.getItem('falconeToken');\n\nconst setToken = token => sessionStorage.setItem('falconeToken', token);\n\nconst extractNames = input => Object.values(input).map(data => data.name);\n\nexport {\n  getToken,\n  setToken,\n  extractNames,\n};","import React, { useState, useEffect, Fragment } from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\nimport queryString from 'query-string';\n\nimport Card from './Card';\nimport AlertBox from './AlertBox';\n\nimport { getToken, setToken, extractNames } from '../utils';\n\nconst CardWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  justify-content: center;\n`\n\nconst totalDestinations = Array(4).fill(0);\n\nconst Home = ({ history }) => {\n  const [planets, setPlanets] = useState([]);\n  const [vehicles, setVehicles] = useState([]);\n\n  const [selectedPlanets, setSelectedPlanets] = useState({});\n  const [selectedVehicles, setSelectedVehicles] = useState({});\n\n  const [totalTime, setTotalTime] = useState(0);\n\n  const [disableSubmitButton, setDisableSubmitButton] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [alertBoxStatus, setAlertBoxStatus] = useState(null);\n\n  useEffect(() => {\n    const fetchPlanets = async () => {\n      const { data } = await axios.get(`/planets`);\n      setPlanets(data);\n    };\n\n    const fetchVehicles = async () => {\n      const { data } = await axios.get(`/vehicles`);\n      setVehicles(data);\n    };\n\n    const fetchToken = async () => {\n      const { data: { token } } = await axios.post(`/token`, {}, {\n        headers: {\n          Accept: 'application/json'\n        }\n      });\n\n      setToken(token);\n      fetchPlanets();\n      fetchVehicles();\n    };\n\n    fetchToken();\n  }, []);\n\n  useEffect(() => {\n    const calculateTotalTime = () => {\n      let total = 0;\n      totalDestinations.forEach((_, index) => {\n        const vehicle = selectedVehicles[`input${index + 1}`];\n        const planet = selectedPlanets[`input${index + 1}`];\n\n        if (vehicle && planet) total += (planet.distance / vehicle.speed);\n      });\n      setTotalTime(total);\n    };\n\n    calculateTotalTime();\n  }, [selectedPlanets, selectedVehicles]);\n\n  useEffect(() => {\n    const disableSubmitButtonStatus = totalDestinations.reduce((acc, _, index) => acc || !selectedVehicles[`input${index + 1}`], false);\n    setDisableSubmitButton(disableSubmitButtonStatus);\n  }, [selectedVehicles]);\n\n  const setData = (type, key, value) => {\n    if (type === 'PLANETS') setSelectedPlanets(data => ({ ...data, [key]: value }));\n    else setSelectedVehicles(data => ({ ...data, [key]: value }));\n  };\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    setDisableSubmitButton(true);\n    try {\n      const inputData = {\n        token: getToken(),\n        planet_names: extractNames(selectedPlanets),\n        vehicle_names: extractNames(selectedVehicles),\n      };\n\n      const { data } = await axios.post('/find', inputData, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n\n      const query = queryString.stringify({ planetName: data.planet_name, totalTime, success: data.status });\n      history.push(`/results?${query}`);\n    } catch (err) {\n      setAlertBoxStatus('Error: Refresh page or try again later.');\n      setTimeout(() => setAlertBoxStatus(null), 3000);\n    } finally {\n      setLoading(false);\n      setDisableSubmitButton(false);\n    }\n  };\n\n  return (\n    <Fragment>\n      {alertBoxStatus && <AlertBox message={alertBoxStatus} />}\n      <section>\n        <h4>Select the planets you want to search in:</h4>\n        <CardWrapper>\n          {\n            totalDestinations.map((_, index) => {\n              const availablePlanets = planets.filter(planet => {\n                const unavailablePlanets = extractNames(selectedPlanets);\n                if (\n                  selectedPlanets[`input${index + 1}`] &&\n                  selectedPlanets[`input${index + 1}`]['name'] === planet.name\n                )\n                  return true;\n\n                if (unavailablePlanets.includes(planet.name))\n                  return false;\n\n                return true;\n              });\n\n              const availableVehicles = vehicles.map(vehicle => {\n                let totalQuantityUsed = 0;\n                for (let i = 1; i <= index + 1; i++) {\n                  if (selectedVehicles[`input${i}`] && selectedVehicles[`input${i}`]['name'] === vehicle.name)\n                    totalQuantityUsed++;\n                }\n\n                return {\n                  ...vehicle,\n                  total_no: vehicle.total_no - totalQuantityUsed\n                };\n              });\n\n              return (\n                <Card\n                  key={index}\n                  id={index + 1}\n                  planets={availablePlanets}\n                  selectedPlanet={selectedPlanets[`input${index + 1}`]}\n                  vehicles={availableVehicles}\n                  selectedVehicle={selectedVehicles[`input${index + 1}`]}\n                  setData={setData}\n                />\n              );\n            })\n          }\n        </CardWrapper>\n        <br />\n        <p className=\"bold\">\n          Time taken: {totalTime}\n        </p>\n        <button\n          disabled={disableSubmitButton}\n          className=\"submit-button paper-btn btn-success\"\n          onClick={handleSubmit}\n        >\n          <span>\n            Find Falcone\n          </span>\n          {\n            loading && (\n              <div className=\"loader\"></div>\n            )\n          }\n        </button>\n      </section>\n    </Fragment>\n  );\n};\n\nexport default withRouter(Home);\n","import React, { useState, useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport queryString from 'query-string';\n\nconst Results = ({ history, location }) => {\n  const [result, setResult] = useState({});\n\n  useEffect(() => {\n    const queryResults = queryString.parse(location.search);\n    setResult(queryResults);\n  }, [location]);\n  return (\n    <section>\n      {\n        (!result.success || result.success === 'false') ?\n          (\n            <div>\n              <p>Failed! Could not find Falcone in targeted destinations.</p>\n            </div>\n          ) :\n          (\n            <div>\n              <p>\n                Success! Congratulations on Finding Falcone. King Shan is mighty pleased.\n              </p>\n              <span className=\"bold\">Time taken: <span className=\"success\">{result.totalTime}</span></span><br />\n              <span className=\"bold\">Planet found: <span className=\"success\">{result.planetName}</span></span>\n            </div>\n          )\n      }\n\n      <br />\n      <button className=\"btn-success\" onClick={() => history.push('/home')}>Start Again</button>\n    </section>\n  );\n};\n\nexport default withRouter(Results);\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nconst NotFound = ({ history }) => (\n  <section id=\"not-found\">\n    <div>\n      <p>404 - Page not found</p>\n      <button className=\"btn-primary\" onClick={() => history.push('/')}>Home</button>\n    </div>\n  </section>\n);\n\nexport default withRouter(NotFound);\n","import React from 'react';\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport axios from 'axios';\n\nimport Header from './components/layouts/Header';\nimport Footer from './components/layouts/Footer';\n\nimport Home from './components/Home';\nimport Results from './components/Results';\nimport NotFound from './components/NotFound';\n\naxios.defaults.baseURL = 'https://findfalcone.herokuapp.com';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Header />\n      <HashRouter basename='/'>\n        <Switch>\n          <Route path=\"/home\" exact component={Home} />\n          <Route path=\"/results\" exact component={Results} />\n          <Route path=\"/\" exact render={() => <Redirect to=\"/home\" />} />\n          <Route component={NotFound} />\n        </Switch>\n      </HashRouter>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport 'papercss/dist/paper.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}